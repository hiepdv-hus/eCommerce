<?php

namespace App\Http\Models;

use App\Libraries\Flat\Entities\MediaEntity;
use App\Libraries\Flat\Entities\MediaThumbnailEntity;
use App\Libraries\Flat\Model;
use App\Libraries\Flat\Collection;

/**
 * Class Media
 * @package App\Http\Models
 */

/**
 * @property MediaEntity $entity
 *
 * @method MediaThumbnail thumbnail()
 */
class Media extends Model
{
    /**
     * @var MediaThumbnail $thumbnail
     */
    protected $thumbnail = MediaThumbnail::class;

    /**
     * Set entity | Required
     * @return void
     */
    protected function setEntity()
    {
        $this->entity = new MediaEntity();
    }

    /**
     * @param null $condition
     * @return Model
     * @throws \Exception
     */
    public function load($condition = null)
    {
        return parent::load($condition); // TODO: Change the autogenerated stub
    }

    /**
     * Load collection
     * @param int $offset
     * @param int $segment
     * @param bool $all
     * @return Collection
     * @throws \Exception
     */
    public function loadCollection($offset = 0, $segment = 10, $all = false)
    {
        parent::loadCollection($offset, $segment, $all);

        // Load thumbnails
        $thumbnail = new MediaThumbnail();
        $thumbnail->filter(
            MediaThumbnailEntity::primary_key()->in($this->collection->pluck($this->getPrimaryKey()))
        )->loadCollection(0,0,1);

        if($thumbnail->collection->count())
        {
            $this->collection->each(function (Media $media) use($thumbnail){
                $thumbnails = $thumbnail->collection->filter(function(MediaThumbnail $item) use($media){
                    return $item->entity->media_id == $media->entity->getId();
                });
                !$thumbnails or $media->thumbnail()->getCollection()->addRange($thumbnails);
            });
        }

        return $this->collection;
    }

    /**
     * @param int $offset
     * @param int $segment
     * @param bool $all
     * @return array
     * @throws \Exception
     */
    public function loadArray($offset = 0, $segment = 10, $all = false)
    {
        return parent::loadArray($offset, $segment, $all); // TODO: Change the autogenerated stub
    }

    /**
     * Load by id
     * @param $id
     * @return $this|$this
     * @throws \Exception
     */
    public function loadById($id)
    {
        parent::loadById($id);

        // Load thumbnails
        if($this->exists())
        {
            $this->thumbnail()->filter(MediaThumbnailEntity::MediaId()->equal($id))->loadCollection(0,0,1);
        }

        return $this;
    }

    /**
     * Set thumbnail
     * @param MediaThumbnail $thumbnail
     */
    public function setThumbnail(MediaThumbnail $thumbnail)
    {
        $this->thumbnail = $thumbnail;
    }
}
