<?php

namespace App\Libraries\Cmd;

/**
 * Class File
 * @package App\Libraries\Cmd
 */
class File extends Command
{
    /**
     * Create controller
     * @param $controller
     * @return string
     */
    public function createController($controller)
    {
        $controllerPath = APP_PATH . '/Http/Controllers';
        $controllerName = $this->getClassName($controller) . 'Controller';

        if(!file_exists($controllerPath))
        {
            @mkdir($controllerPath);
        }

        $content = <<<CONTENT
<?php

namespace App\\Http\\Controllers;

/**
 * Class $controllerName
 * @package App\\Http\\Controllers
 */
class $controllerName extends AppController
{

}
CONTENT;
        // Create entity file
        $file = fopen($controllerPath .'/'. $controllerName . '.php', 'w');
        fwrite($file, $content);
        fclose($file);

        return $controllerName . ' was created successfully!';
    }

    /**
     * Create model
     * @param $model
     * @param $table
     * @return string
     * @throws \Exception
     */
    public function createModel($model, $table)
    {
        $modelPath = APP_PATH . '/Http/Models/';
        $modelName = $this->getClassName($model);

        if(!file_exists($modelPath))
        {
            @mkdir($modelPath);
        }

        $tableName = trim($table, '_');
        $entity = $this->getClassName($tableName).'Entity';

        $content = <<<CONTENT
<?php

namespace App\\Http\\Models;

use App\\Libraries\\Flat\\Entities\\{$entity};
use App\\Libraries\\Flat\Model;
use App\\Libraries\\Flat\\Collection;

/**
 * Class $modelName
 * @package App\\Http\\Models
 */
 
/**
 * @property $entity \$entity
 */
class $modelName extends Model
{
    /**
     * Set entity | Required
     * @return void
     */
    protected function setEntity()
    {
        \$this->entity = new {$entity}();
    }
    
    /**
     * @param null \$condition
     * @return \$this
     * @throws \Exception
     */
    public function load(\$condition = null)
    {
        return parent::load(\$condition); // TODO: Change the autogenerated stub
    }

    /**
     * Load collection
     * @param int \$offset
     * @param int \$segment
     * @param bool \$all
     * @return Collection
     * @throws \Exception
     */
    public function loadCollection(\$offset = 0, \$segment = 10, \$all = false)
    {
        return parent::loadCollection(\$offset, \$segment, \$all); // TODO: Change the autogenerated stub
    }
    
    /**
     * @param int \$offset
     * @param int \$segment
     * @param bool \$all
     * @return array
     * @throws \Exception
     */
    public function loadArray(\$offset = 0, \$segment = 10, \$all = false)
    {
        return parent::loadArray(\$offset, \$segment, \$all); // TODO: Change the autogenerated stub
    }
    
    
}
CONTENT;
        // Create entity file
        $file = fopen($modelPath .'/'. $modelName . '.php', 'w');
        fwrite($file, $content);
        fclose($file);

        return $modelName . ' model was created successfully!';
    }

    /**
     * Create input
     * @param $input
     * @return string
     */
    public function createInput($input)
    {
        $inputsRegisterPath = APP_PATH . '/Http/Data/RegisterInput.php';
        $inputsRegister = include_once $inputsRegisterPath;
        if (!is_array($inputsRegister)) {
            $inputsRegister = [];
        }

        $inputPath = APP_PATH . '/Http/Data/Input';
        $inputName = $this->getClassName($input) . 'Input';
        $inputClass = 'App\Http\Data\Input\\'.$inputName;

        if (in_array($inputClass, $inputsRegister)) {
            die('Đã tồn tại input: ' . $inputClass);
        }

        $inputsRegister[] = $inputClass;

        if(!file_exists($inputPath))
        {
            @mkdir($inputPath);
        }

        $content = <<<CONTENT
<?php

namespace App\\Http\\Data\\Input;

use App\\Libraries\\Request\\Data\\Input;

/**
 * Class $inputName
 * @package App\\Http\\Data\\Input
 */
class $inputName extends Input
{
    
    /**
     * @var array \$resultMap
     */
    protected \$resultMap = [];
    
    /**
     * @var array \$classMap
     */
    protected \$classMap = [];
}
CONTENT;
        // Create input file
        $file = fopen($inputPath . '/' . $inputName . '.php', 'w');
        fwrite($file, $content);
        fclose($file);

        $importContent = '';
        $returnContent = <<<CONTENT
        
return [
CONTENT;
        ;

        foreach ($inputsRegister as $_input_register) {
//            $importContent .= <<<CONTENT
//
//use $_input_register;
//CONTENT;
            $_returnContent = <<<CONTENT

    '$_input_register',
CONTENT;
            $returnContent .= rtrim($_returnContent);
        }

        $returnContent .= <<<CONTENT

];
CONTENT;

        $content = <<<CONTENT
<?php
/**
 * Register input
 */
 $returnContent
CONTENT;

        $file = fopen($inputsRegisterPath, 'w');
        fwrite($file, rtrim($content));
        fclose($file);

        return $inputName . ' was created successfully!';
    }

    /**
     * Create output
     * @param $output
     * @return string
     */
    public function createOutput($output)
    {
        $outputPath = APP_PATH . '/Http/Data/Output';
        $outputName = $this->getClassName($output) . 'Output';

        if(!file_exists($outputPath))
        {
            @mkdir($outputPath);
        }

        $content = <<<CONTENT
<?php

namespace App\\Http\\Data\\Output;

use App\\Libraries\\Request\\Data\\IO;

/**
 * Class $outputName
 * @package App\\Http\\Data\\Output
 */
class $outputName extends IO
{
    
    /**
     * @var array \$resultMap
     */
    protected \$resultMap = [];
}
CONTENT;
        // Create entity file
        $file = fopen($outputPath . '/' . $outputName . '.php', 'w');
        fwrite($file, $content);
        fclose($file);

        return $outputName . ' was created successfully!';
    }
}
